package datastructures.dictionaries;

import cse332.datastructures.containers.Item;
import cse332.datastructures.trees.BinarySearchTree;
import cse332.exceptions.NotYetImplementedException;
import cse332.interfaces.misc.DeletelessDictionary;
import cse332.interfaces.misc.SimpleIterator;
import cse332.interfaces.worklists.WorkList;
import datastructures.worklists.ArrayStack;
import datastructures.worklists.ListFIFOQueue;

import java.util.Iterator;

/**
 * 1. The list is typically not sorted.
 * 2. Add new items to the front of the list.
 * 3. Whenever find or insert is called on an existing key, move it
 * to the front of the list. This means you remove the node from its
 * current position and make it the first node in the list.
 * 4. You need to implement an iterator. The iterator SHOULD NOT move
 * elements to the front.  The iterator should return elements in
 * the order they are stored in the list, starting with the first
 * element in the list. When implementing your iterator, you should
 * NOT copy every item to another dictionary/list and return that
 * dictionary/list's iterator.
 */
public class MoveToFrontList<K, V> extends DeletelessDictionary<K, V> {
    private Node<Item<K,V>> head;
    private int size;

    private class Node<E> {
        E work;
        Node next;

        public Node(E work) {
            this.work = work;
            this.next = null;
        }
    }

    public MoveToFrontList() {
        this.head = null;
        this.size = 0;
    }

    @Override
    public V insert(K key, V value) {
        if (key == null || value == null) {
            throw new IllegalArgumentException();
        }
        Node<Item<K,V>> current = head;
        Node<Item<K, V>> newNode = new Node<>(new Item<>(key,value));
        while (current != null) {
            System.out.println("INSERT LOOP");
            System.out.println(current.work.value);
            if (current.work.key == key) {
                V val = current.work.value;
                current.work.value = value;

                Node<Item<K, V>> second = this.head.next;
                this.head = current;
                this.head.next = second;
                return val;
            }
            current = current.next;
        }
        newNode.next = this.head;
        this.head = newNode;
        this.size++;
        return null;
    }

    @Override
    public V find(K key) {
        if (key == null) {
            throw new IllegalArgumentException();
        }
        Node<Item<K,V>> current = this.head;
        Node<Item<K,V>> prev = null;
        int counter = 0;
        while (current != null) {
            System.out.println("FIND LOOP");
            System.out.println(current.work.value);
            if (counter == 30) {
                break;
            }
            counter++;
            if (current.work.key == key) {
                if (prev != null) {
                    prev.next = current.next;
                }
                current.next = this.head;
                this.head = current;
                return current.work.value;
            }
            prev = current;
            current = current.next;
        }
        return null;
    }

    @Override
    public Iterator<Item<K, V>> iterator() {
        return new MTFIterator();
    }

    private class MTFIterator extends SimpleIterator<Item<K, V>> {
        private Node<Item<K,V>> current;

        public MTFIterator() {
            this.current = head;
        }

        @Override
        public boolean hasNext() {
            return this.current != null;
        }

        @Override
        public Item<K, V> next() {
            if (!hasNext()) {
                return null;
            }
            Item<K, V> work = this.current.work;
            this.current = current.next;
            return work;
        }
    }
}
